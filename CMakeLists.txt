cmake_minimum_required(VERSION 3.18)

set(MODULE_NAME osdialog)

project(${MODULE_NAME} LANGUAGES CXX)

set(OSDIALOG_PLATFORM_OVERRIDE "" CACHE STRING "Platform for osdialog: windows, gtk, mac, zenity")

if(NOT CMAKE_SYSTEM_NAME STREQUAL "Android")
	set(OSDIALOG_FOUND ON CACHE INTERNAL "")
	if (EXISTS ${OSDIALOG_PLATFORM_OVERRIDE})
		set(OSDIALOG_PLATFORM ${OSDIALOG_PLATFORM_OVERRIDE})
	else()
		if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
			set(OSDIALOG_PLATFORM windows)
		elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
			if(${CMAKE_CXX_SIMULATE_ID} AND ${CMAKE_CXX_SIMULATE_ID} STREQUAL MSVC)
				set(OSDIALOG_PLATFORM windows)
			else()
				set(OSDIALOG_PLATFORM gtk)
			endif()
		elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
			set(OSDIALOG_PLATFORM gtk)
		endif()
	endif()

	if (${OSDIALOG_PLATFORM} STREQUAL windows)
		add_library(${MODULE_NAME} osdialog.h osdialog.c osdialog_std.h osdialog_std.cpp osdialog_win.h osdialog_win.c)
	elseif (${OSDIALOG_PLATFORM} STREQUAL mac)
		add_library(${MODULE_NAME} osdialog.h osdialog.c osdialog_std.h osdialog_std.cpp osdialog_mac.G)
	elseif (${OSDIALOG_PLATFORM} STREQUAL gtk)
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(GTK REQUIRED gtk+-3.0 IMPORTED_TARGET)
		add_library(${MODULE_NAME} osdialog.h osdialog.c osdialog_std.h osdialog_std.cpp osdialog_gtk3.c)

        if (NOT TARGET PkgConfig::GTK)
            message(FATAL_ERROR "gtk2 library not found")
        endif()

        target_link_libraries(${MODULE_NAME} PRIVATE PkgConfig::GTK)
	elseif (${OSDIALOG_PLATFORM} STREQUAL zenity)
		add_library(${MODULE_NAME} osdialog.h osdialog.c osdialog_std.h osdialog_std.cpp osdialog_zenity.c)
	else()
		if (${OSDIALOG_PLATFORM})
			message(WARNING "osdialog platform ${OSDIALOG_PLATFORM} not supported or mispelled")
		else()
			message(WARNING "specify platform for osdialog through OSDIALOG_PLATFORM_OVERRIDE")
		endif()
	endif()

	target_include_directories(${MODULE_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
	target_compile_definitions(${MODULE_NAME} PUBLIC LIB_OSDIALOG)
	target_link_libraries(${MODULE_NAME} PUBLIC tepp)
else()
	set(OSDIALOG_FOUND OFF CACHE INTERNAL "")
endif()
